---
title: "blog post 7"
author: "Sean Fung"
date: "2024-11-26"
date-modified: "2024-11-26"
draft: FALSE
---
```{r load libraries}
#| results: "hide"
#| echo: false
library(tidyverse)
library(sf)
library(tidycensus)
library(here)
library(viridis)
library(dplyr)
library(MASS)
library(tidyr)

# Load crime data and convert to spatial format
data <- readRDS(here("filtered_data_2.rds"))
crime_sf <- st_as_sf(data, coords = c("LON", "LAT"), crs = 4326)

# Load neighborhood boundaries
neighborhoods <- st_read(here("LA_Times_Neighborhood_Boundaries-shp/8494cd42-db48-4af1-a215-a2c8f61e96a22020328-1-621do0.x5yiu.shp")) %>%
  st_transform(st_crs(crime_sf))

# Join crime incidents with neighborhoods
crime_with_neighborhoods <- st_join(crime_sf, neighborhoods, join = st_within)
census_api_key("c2aebe6041f0c99e41a3458ed8d0b95ee3650fa4")

# Load and transform median income data
economic_data <- get_acs(
  geography = "block group",
  variables = c(median_income = "B19013_001"),
  state = "CA",
  county = "Los Angeles",
  year = 2020,
  geometry = TRUE
) %>% 
  st_transform(st_crs(crime_with_neighborhoods))

# Join income with neighborhood-level crime data
crime_with_income <- st_join(crime_with_neighborhoods, economic_data, join = st_within)

# Summarize crime data by neighborhood
crime_summary <- crime_with_income %>%
  group_by(GEOID) %>%
  summarize(
    total_crimes = n(),
    avg_income = median(estimate, na.rm = TRUE),
    geometry = st_union(geometry)
  ) %>%
  filter(!is.na(avg_income)) %>%  # Remove rows with missing income
  st_as_sf()



lapd_boundary <- st_read(here("CityBoundaryofLosAngeles/geo_export_416eaeda-447a-4473-b003-37e2cad181ac.shp")) %>%
  st_transform(st_crs(crime_sf))  # Align CRS



crime_within_lapd <- crime_sf %>%
  filter(rowSums(st_within(geometry, st_geometry(lapd_boundary), sparse = FALSE)) > 0)

crime_with_income_lapd <- st_join(crime_within_lapd, economic_data, join = st_within)

economic_data_lapd <- st_intersection(economic_data, lapd_boundary)


# Update the crime summary
crime_summary_lapd <- crime_with_income_lapd %>%
  group_by(GEOID) %>%
  summarize(
    total_crimes = n(),
    avg_income = mean(estimate, na.rm = TRUE),
    geometry = st_union(geometry)
  ) %>%
  filter(!is.na(avg_income)) %>%  # Exclude rows with missing income
  st_as_sf()
```

```{r Crime Vs Median Income}
# Update visualizations
ggplot(crime_summary_lapd, aes(x = avg_income, y = total_crimes)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Crime vs Median Income (LAPD Jurisdiction)", x = "Median Income", y = "Total Crimes")
```

```{r Heatmap within LAPD Jurisdiction}
ggplot() +
  geom_sf(data = economic_data_lapd, aes(fill = estimate), color = NA) +  # Median income layer
  scale_fill_viridis_c(option = "magma", na.value = "grey50") +
  scale_color_viridis_c(option = "inferno", na.value = "grey50") +
  labs(
    title = "Median Income within LAPD Jurisdiction",
    fill = "Median Income",
    color = "Average Income"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18, hjust = 0.5),
    legend.title = element_text(size = 14),
    legend.text = element_text(size = 12),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  ) +
  coord_sf(
    xlim = c(-119, -117),  # Focus on the Los Angeles area
    ylim = c(33, 35)       # Focus on the Los Angeles area
  )

```

```{r Heatmap with Crime Data}
crime_within_lapd <- st_transform(crime_within_lapd, st_crs(economic_data_lapd))

ggplot() +
  # Median income heatmap
  geom_sf(data = economic_data_lapd, aes(fill = estimate), color = NA) +  
  scale_fill_viridis_c(option = "magma", na.value = "grey50") +
  scale_color_viridis_c(option = "inferno", na.value = "grey50") +
  # Overlay crime points
  geom_sf(data = crime_within_lapd, aes(), color = "black", shape = 4, size = 0.5, alpha = 0.7) +
  labs(
    title = "Median Income and Crime Data within LAPD Jurisdiction",
    fill = "Median Income",
    color = "Average Income"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 18, hjust = 0.5),
    legend.title = element_text(size = 14),
    legend.text = element_text(size = 12),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  ) +
  coord_sf(
    xlim = c(-119, -117),  # Focus on the Los Angeles area
    ylim = c(33, 35)       # Focus on the Los Angeles area
  )
#Good place to use shinylive here. Can filter by year. 

# crime_filtered <- crime_within_lapd %>%
#   filter(year == 2021)
# ggplot() +
#   geom_sf(data = economic_data_lapd, aes(fill = estimate), color = NA) +  
#   scale_fill_viridis_c(option = "magma", na.value = "grey50") +
#   geom_sf(data = crime_filtered, aes(), color = "black", shape = 4, size = 0.5, alpha = 0.7) +
#   labs(
#     title = "Median Income and 2020 Crime Data within LAPD Jurisdiction",
#     fill = "Median Income"
#   ) +
#   theme_minimal() +
#   coord_sf(xlim = c(-119, -117), ylim = c(33, 35))

#Look at data utilizing a poisson distribution model. 
# Fit a Poisson regression model

```





```{r}

crime_summary_race <- crime_with_income %>%
  group_by(GEOID, Descent_Description) %>%
  summarize(
    total_crimes = n(),  # Count crimes for each GEOID and Descent_Description group
    avg_median_income = mean(estimate, na.rm = TRUE)
  ) %>%
  pivot_wider(
    names_from = Descent_Description,
    values_from = total_crimes,
    values_fill = 0  # Fill missing values with 0 for crimes
  ) %>%
  rowwise() %>%
  mutate(
    total_crimes = sum(c_across(-c(GEOID, avg_median_income, geometry)), na.rm = TRUE)  # Sum only the crime columns
  ) %>%
  ungroup()



```

```{r}
crime_summary_race <- crime_summary_race %>%
  rename_with(~ make.names(.), everything())

bivar_poisson_model <- glm(
  total_crimes ~ avg_median_income + Hispanic.Latin.Mexican + White + Black + Other + 
    Other.Asian + Unknown + Japanese + Korean + Filipino + Chinese + Hawaiian + 
    Asian.Indian + American.Indian.Alaskan.Native + Cambodian + Vietnamese + Laotian,
  family = poisson(link = "log"),
  data = crime_summary_race
)
summary(bivar_poisson_model)

bivar_nb_model <- glm.nb(total_crimes ~ avg_median_income + Hispanic.Latin.Mexican + White + Black + Other + 
    Other.Asian + Unknown + Japanese + Korean + Filipino + Chinese + Hawaiian + 
    Asian.Indian + American.Indian.Alaskan.Native + Cambodian + Vietnamese + Laotian, data = crime_summary_race)
summary(bivar_nb_model)
```
```{r}
crime_summary_race_model <- crime_summary_race %>%
  filter(complete.cases(
    avg_median_income, Hispanic.Latin.Mexican, White, Black, Other, Other.Asian,
    Unknown, Japanese, Korean, Filipino, Chinese, Hawaiian, Asian.Indian,
    American.Indian.Alaskan.Native, Cambodian, Vietnamese, Laotian
  ))

# Add predicted values to the filtered data
crime_summary_race_model <- crime_summary_race_model %>%
  mutate(predicted_crimes = predict(bivar_nb_model, type = "response"))

crime_race_long <- crime_summary_race_model %>%
  pivot_longer(
    cols = c(Hispanic.Latin.Mexican, White, Black, Other, Other.Asian, Unknown, 
             Japanese, Korean, Filipino, Chinese, Hawaiian, Asian.Indian, 
             American.Indian.Alaskan.Native, Cambodian, Vietnamese, Laotian),
    names_to = "race",
    values_to = "crime_count"
  )


crime_race_long <- crime_summary_race %>%
  pivot_longer(
    cols = c(Hispanic.Latin.Mexican, White, Black, Other, Other.Asian, Unknown, 
             Japanese, Korean, Filipino, Chinese, Hawaiian, Asian.Indian, 
             American.Indian.Alaskan.Native, Cambodian, Vietnamese, Laotian),
    names_to = "race",
    values_to = "crime_count"
  ) %>%
  filter(!is.na(crime_count) & crime_count > 0) %>%
  mutate(avg_median_income = avg_median_income / 1000)



# Fit Poisson regression with pivoted data
poisson_model <- glm(
  crime_count ~ avg_median_income + race,
  family = poisson(link = "log"),
  data = crime_race_long
)
summary(poisson_model)

# Fit Negative Binomial regression with pivoted data
crime_race_long <- crime_race_long %>%
  filter(complete.cases(avg_median_income, race, crime_count))

nb_model <- glm.nb(
  crime_count ~ avg_median_income * race,
  data = crime_race_long
)
summary(nb_model)

crime_race_long <- crime_race_long %>%
  mutate(predicted_crimes = predict(nb_model, newdata = crime_race_long, type = "response"))


```


```{r Refinement of model}
colnames(crime_race_long)


grid <- expand.grid(
  avg_median_income = seq(min(crime_race_long$avg_median_income), max(crime_race_long$avg_median_income), length.out = 100),
  race = unique(crime_race_long$race)
)

grid$predicted_crimes <- predict(nb_model, newdata = grid, type = "response")

ggplot(grid, aes(x = avg_median_income, y = predicted_crimes, color = race)) +
  geom_line() +
  labs(
    title = "Predicted Crime Counts vs Median Income by Race",
    x = "Average Median Income (in $1,000s)",
    y = "Predicted Crime Counts"
  ) +
  theme_minimal()


ggplot(grid, aes(x = avg_median_income, y = predicted_crimes, color = race)) +
  geom_line() +
  facet_wrap(~race, scales = "free_y") +  # Facet by race, allowing y-axis to vary by panel
  labs(
    title = "Predicted Crime Counts vs Median Income by Race (Facet by Race)",
    x = "Average Median Income (in $1,000s)",
    y = "Predicted Crime Counts"
  ) +
  theme_minimal() +
  theme(
    strip.text = element_text(size = 10),  # Adjust facet labels
    legend.position = "none"              # Hide legend if redundant
  )
```

```{r}
#| echo: false
crime_with_income <- st_join(crime_with_neighborhoods, economic_data, join = st_within)
median_income_by_neighborhood <- crime_with_income %>%
  group_by(AREA.NAME) %>%
  summarize(
    median_income = median(estimate, na.rm = TRUE),
    total_crimes = n(),  # Optional: Include total crimes
    geometry = st_union(geometry)
  ) %>%
  filter(!is.na(median_income)) %>% 
  st_as_sf()
ggplot(median_income_by_neighborhood, aes(x = median_income, y = total_crimes)) +
  geom_point(aes(color = median_income, size = total_crimes), alpha = 0.7) +
  scale_color_viridis_c(option = "plasma", name = "Median Income") +
  labs(
    title = "Relationship Between Median Income and Total Crimes",
    x = "Median Income (USD)",
    y = "Total Crimes",
    caption = "Source: ACS 2020 and Crime Data"
  ) +
  theme_minimal() +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```


